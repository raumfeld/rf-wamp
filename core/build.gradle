apply plugin: 'kotlin-multiplatform'
apply plugin: 'kotlinx-serialization'
apply plugin: 'com.android.library'
apply plugin: 'com.github.dcendents.android-maven'

repositories {
    google()
    jcenter()
}

group 'com.github.raumfeld.rf-wamp'

android {
    compileSdkVersion compile_sdk_version
    buildToolsVersion(build_tools_version)

    sourceSets {
        main {
            setRoot("src/androidMain")
        }

        test {
            setRoot("src/androidTest")
        }
    }
}

kotlin {
    android {
        publishAllLibraryVariants()
    }
    // this fails with "A POM cannot have multiple artifacts with the same type and classifier"
//    jvm()

    iosX64("ios") {
        binaries {
            framework('RfWamp')
        }
    }

    sourceSets {
        commonMain {
            dependencies {
                implementation kotlin('stdlib-common')
                api "org.jetbrains.kotlinx:kotlinx-serialization-core:$kotlin_serialization_core_version"
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlin_coroutines_version"
            }
        }
        commonTest {
            dependencies {
                implementation kotlin('test-common')
                implementation kotlin('test-annotations-common')
                implementation "io.mockk:mockk-common:$mockk_version"
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlin_coroutines_version"
            }
        }
        androidMain {
            dependsOn commonMain
        }
        jvmMain {
            dependsOn commonMain
        }
        androidTest {
            dependsOn commonTest
            dependencies {
                implementation kotlin('test')
                implementation kotlin('test-junit')
                implementation "io.mockk:mockk:$mockk_version"
                implementation project(":extensions-android-okhttp")
            }
        }
        iosMain {
            dependsOn commonMain
        }
        iosTest {
            dependsOn commonTest
            dependencies {
                implementation kotlin('test')
            }
        }
    }

    // This should work, but it does not. *screams at the Gradle gods*
    targets.all {
        compilations.all {
            kotlinOptions {
                freeCompilerArgs = [
                        '-Xuse-experimental=kotlinx.coroutines.ExperimentalCoroutinesApi',
                        '-Xuse-experimental=kotlinx.coroutines.ObsoleteCoroutinesApi',
                        '-Xallow-result-return-type']
            }
        }
    }
}

afterEvaluate {
    tasks.install {
        dependsOn tasks.getByName("testReleaseUnitTest")
    }
}